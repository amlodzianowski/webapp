{
  "Description"             : "Stack consisting of 3 ECS services and optional application load balancers",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters"              : {
    "VpcId"                 : {"Type": "String", "Default": "vpc-f7031f92", "Description": "VPC container ID"},
    "WebClusterId"          : {"Type": "String", "Default": "mgmt-web"},
    "AppClusterId"          : {"Type": "String", "Default": "mgmt-app"},
    "DbClusterId"           : {"Type": "String", "Default": "mgmt-mongo"},
    "HostedZone"            : {"Type": "String", "Default": "adrian-training.aws.logicworks.net"},
    "WebUpsteamHost"        : {"Type": "String", "Default": "a.adrian-training.aws.logicworks.net"},
    "WebUpsteamPort"        : {"Type": "String", "Default": "18000"},
    "WebImage"              : {"Type": "String", "Default": "amlodzianowski/web:v1"},
    "WebContainerName"      : {"Type": "String", "Default": "web_container"},
    "WebContainerPort"      : {"Type": "Number", "Default": 80},
    "WebHostPort"           : {"Type": "Number", "Default": 8000},
    "WebELBDnsName"         : {"Type": "String", "Default": "w.adrian-training.aws.logicworks.net"},
    "WebInstanceSg"         : {"Type": "String", "Default": "sg-d48edab3"},
    "AppUpsteamHost"        : {"Type": "String", "Default": "db.adrian-training.aws.logicworks.net"},
    "AppUpsteamPort"        : {"Type": "String", "Default": "25000"},
    "AppImage"              : {"Type": "String", "Default": "amlodzianowski/app:v1"},
    "AppContainerName"      : {"Type": "String", "Default": "app_container"},
    "AppContainerPort"      : {"Type": "Number", "Default": 8000},
    "AppHostPort"           : {"Type": "Number", "Default": 18000},
    "AppELBDnsName"         : {"Type": "String", "Default": "a.adrian-training.aws.logicworks.net"},
    "AppInstanceSg"         : {"Type": "String", "Default": "sg-3a8fdb5d"},
    "DbImage"               : {"Type": "String", "Default": "amlodzianowski/db"},
    "DbContainerName"       : {"Type": "String", "Default": "db_container"},
    "DbContainerPort"       : {"Type": "Number", "Default": 27017},
    "DbHostPort"            : {"Type": "Number", "Default": 25000},
    "DbELBDnsName"          : {"Type": "String", "Default": "db.adrian-training.aws.logicworks.net"},
    "DbInstanceSg"          : {"Type": "String", "Default": "sg-f48fdb93"},
    "ELBSubnetId1"          : {"Type": "String", "Default": "subnet-9b999dc2"},
    "ELBSubnetId2"          : {"Type": "String", "Default": "subnet-73fb3c17"}
  },
  "Conditions"              : {
     "CreateWebELB"        : {"Fn::Not": [{"Fn::Equals": [{"Ref": "WebELBDnsName"}, "nil"]}]},
     "CreateWebServiceOnly": {"Fn::Equals": [{"Ref": "WebELBDnsName"}, "nil"]},
     "CreateAppELB"        : {"Fn::Not": [{"Fn::Equals": [{"Ref": "AppELBDnsName"}, "nil"]}]},
     "CreateAppServiceOnly": {"Fn::Equals": [{"Ref": "AppELBDnsName"}, "nil"]},
     "CreateDbELB"         : {"Fn::Not": [{"Fn::Equals": [{"Ref": "DbELBDnsName"}, "nil"]}]},
     "CreateDbServiceOnly" : {"Fn::Equals": [{"Ref": "DbELBDnsName"}, "nil"]}
  },
  "Resources"               : {
    "clusterEcsRole"       : {
      "Type"      : "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version"  : "2012-10-17",
          "Statement": [{"Effect": "Allow", "Principal": {"Service": ["ecs.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]
        },
        "Path"                    : "/",
        "ManagedPolicyArns"       : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"]
      }
    },
    "webServiceAlb" : {
      "Type" : "AWS::ECS::Service",
      "Condition" : "CreateWebELB",
      "DependsOn" : ["webElbListener"],
      "Properties" : {
        "Cluster" : {"Ref": "WebClusterId"},
        "DesiredCount" : 1,
        "LoadBalancers" : [{"Fn::If": ["CreateWebELB", {
            "ContainerName" : {"Ref": "WebContainerName"},
            "ContainerPort" : {"Ref": "WebContainerPort"},
            "TargetGroupArn" : {"Ref": "webElbTargetGroup"}
        }, {"Ref": "AWS::NoValue"}]}],
        "Role" : {"Fn::If": ["CreateWebELB", {"Ref": "clusterEcsRole"}, {"Ref": "AWS::NoValue"}]},
        "TaskDefinition" : {"Ref": "webTask"}
      }
    },
    "webService" : {
      "Type" : "AWS::ECS::Service",
      "Condition" : "CreateWebServiceOnly",
      "Properties" : {
        "Cluster" : {"Ref": "WebClusterId"},
        "DesiredCount" : 1,
        "TaskDefinition" : {"Ref": "webTask"}
      }
    },
    "webTask" : {
      "Type" : "AWS::ECS::TaskDefinition",
        "Properties" : {
          "ContainerDefinitions" : [ {
            "Command"    : ["/bin/bash", "-c", "/data/init.sh; /usr/sbin/nginx -g 'daemon off;'"],
            "Environment": [{"Name" : "UPSTREAM_PORT","Value" : {"Ref": "WebUpsteamPort"} }, {"Name" : "UPSTREAM_HOST","Value" : {"Ref": "WebUpsteamHost"} }],
            "Image"      : {"Ref": "WebImage"},
            "Memory"     : 128,
            "Name"       : {"Ref": "WebContainerName"},
            "PortMappings" : [{"ContainerPort" : {"Ref": "WebContainerPort"},"HostPort":{"Ref": "WebHostPort"}}]
            } ]
        }
    },
    "certificate"               : {
      "Type"      : "AWS::CertificateManager::Certificate",
      "Condition" : "CreateWebELB",
      "Properties": {
        "DomainName"             : {"Ref": "WebELBDnsName"}
      }
    },
    "webElb" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Condition" : "CreateWebELB",
      "Properties" : {
        "Name" : "web-ecs-elb",
        "Scheme" : "internet-facing",
        "SecurityGroups" : [{"Ref": "webElbSg"}],
        "Subnets" : [ {"Ref": "ELBSubnetId1"}, {"Ref": "ELBSubnetId2"} ]
      }
    },
    "webElbListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Condition" : "CreateWebELB",
      "Properties" : {
        "Certificates" : [ {"CertificateArn" : {"Ref": "certificate"}} ],
        "DefaultActions" : [{  "TargetGroupArn" : {"Ref": "webElbTargetGroup"},"Type" : "forward"}],
        "LoadBalancerArn" : {"Ref": "webElb"},
        "Port" : 443,
        "Protocol" : "HTTPS"
      }
    },
    "webElbTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Condition" : "CreateWebELB",
      "Properties" : {
        "Port" : {"Ref": "WebHostPort"},
        "Protocol" : "HTTP",
        "VpcId" : {"Ref": "VpcId"}
      }
    },
    "webElbRecordSetGroup": {
      "Type"      : "AWS::Route53::RecordSetGroup",
      "Condition" : "CreateWebELB",
      "DependsOn" : ["webElb"],
      "Properties": {
        "HostedZoneName": {"Fn::Join": ["", [{"Ref": "HostedZone"}, "."]]},
        "RecordSets"    : [
          {
            "Name"       : {
              "Fn::Join": ["", [{"Ref": "WebELBDnsName"}, "."]]
            },
            "Type"       : "A",
            "AliasTarget": {
              "HostedZoneId": {"Fn::GetAtt": ["webElb", "CanonicalHostedZoneID"]},
              "DNSName"     : {"Fn::GetAtt": ["webElb", "DNSName"]}
            }
          }
        ]
      }
    },
    "webElbSg"        : {
      "Type"      : "AWS::EC2::SecurityGroup",
      "Condition" : "CreateWebELB",
      "Properties": {
        "GroupDescription"    : "[cfn] web-elb-sg",
        "VpcId"               : {"Ref": "VpcId"},
        "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0"}],
        "Tags"                : [{"Key": "Name", "Value": "web-elb-sg"}]
      }
    },
    "webInstanceSgRule"     : {
      "Type"      : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "CreateWebELB",
      "DependsOn": ["webElbSg"],
      "Properties": {
                "GroupId": {"Ref": "WebInstanceSg"},
                "IpProtocol": "tcp",
                "FromPort": {"Ref": "WebHostPort"},
                "ToPort": {"Ref": "WebHostPort"},
                "SourceSecurityGroupId": {"Ref": "webElbSg"}
            }
    },
    "appServiceAlb" : {
      "Type" : "AWS::ECS::Service",
      "Condition" : "CreateAppELB",
      "DependsOn" : ["appElbListener"],
      "Properties" : {
        "Cluster" : {"Ref": "AppClusterId"},
        "DesiredCount" : 1,
        "LoadBalancers" : [{"Fn::If": ["CreateAppELB", {
            "ContainerName" : {"Ref": "AppContainerName"},
            "ContainerPort" : {"Ref": "AppContainerPort"},
            "TargetGroupArn" : {"Ref": "appElbTargetGroup"}
        }, {"Ref": "AWS::NoValue"}]}],
        "Role" : {"Fn::If": ["CreateAppELB", {"Ref": "clusterEcsRole"}, {"Ref": "AWS::NoValue"}]},
        "TaskDefinition" : {"Ref": "appTask"}
      }
    },
    "appService" : {
      "Type" : "AWS::ECS::Service",
      "Condition" : "CreateAppServiceOnly",
      "Properties" : {
        "Cluster" : {"Ref": "AppClusterId"},
        "DesiredCount" : 1,
        "TaskDefinition" : {"Ref": "appTask"}
      }
    },
    "appTask" : {
      "Type" : "AWS::ECS::TaskDefinition",
        "Properties" : {
          "ContainerDefinitions" : [ {
            "Command"    : ["/usr/local/bin/uwsgi", "--socket", ":8000", "--wsgi-file", "/data/wsgi.py"],
            "Environment": [{"Name" : "UPSTREAM_PORT","Value" : {"Ref": "AppUpsteamPort"} }, {"Name" : "UPSTREAM_HOST","Value" : {"Ref": "AppUpsteamHost"} }],
            "Image"      : {"Ref": "AppImage"},
            "Memory"     : 128,
            "Name"       : {"Ref": "AppContainerName"},
            "PortMappings" : [{"ContainerPort" : {"Ref": "AppContainerPort"},"HostPort":{"Ref": "AppHostPort"}}]
            } ]
        }
    },
    "appElb" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition" : "CreateAppELB",
      "Properties" : {
        "HealthCheck" : {
           "HealthyThreshold" : "2",
           "Interval" : "6",
           "Target" : {"Fn::Join": ["", ["TCP:", {"Ref": "AppHostPort"}]]},
           "Timeout" : "5",
           "UnhealthyThreshold" : "2"
        },
        "Listeners" : [{
           "InstancePort" : {"Ref": "AppHostPort"},
           "InstanceProtocol" : "TCP",
           "LoadBalancerPort" : {"Ref": "AppHostPort"},
           "Protocol" : "TCP"
        }],
        "LoadBalancerName" : "app-ecs-elb",
        "Scheme" : "internal",
        "SecurityGroups" : [{"Ref": "appElbSg"}],
        "Subnets" : [ {"Ref": "ELBSubnetId1"}, {"Ref": "ELBSubnetId2"} ]
      }
    },
    "appElbSg"        : {
      "Type"      : "AWS::EC2::SecurityGroup",
      "Condition" : "CreateAppELB",
      "Properties": {
        "GroupDescription"    : "[cfn] app-elb-sg",
        "VpcId"               : {"Ref": "VpcId"},
        "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": {"Ref": "AppHostPort"}, "ToPort": {"Ref": "AppHostPort"}, "SourceSecurityGroupId": {"Ref": "WebInstanceSg"}}],
        "Tags"                : [{"Key": "Name", "Value": "app-elb-sg"}]
      }
    },
    "appInstanceSgRule"     : {
      "Type"      : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "CreateAppELB",
      "DependsOn": ["appElbSg"],
      "Properties": {
                "GroupId": {"Ref": "AppInstanceSg"},
                "IpProtocol": "tcp",
                "FromPort": {"Ref": "AppHostPort"},
                "ToPort": {"Ref": "AppHostPort"},
                "SourceSecurityGroupId": {"Ref": "appElbSg"}
            }
    },
    "appElbRecordSetGroup": {
      "Type"      : "AWS::Route53::RecordSetGroup",
      "Condition" : "CreateAppELB",
      "DependsOn" : ["appElb"],
      "Properties": {
        "HostedZoneName": {"Fn::Join": ["", [{"Ref": "HostedZone"}, "."]]},
        "RecordSets"    : [
          {
            "Name"       : {
              "Fn::Join": ["", [{"Ref": "AppELBDnsName"}, "."]]
            },
            "Type"       : "A",
            "AliasTarget": {
              "HostedZoneId": {"Fn::GetAtt": ["appElb", "CanonicalHostedZoneID"]},
              "DNSName"     : {"Fn::GetAtt": ["appElb", "DNSName"]}
            }
          }
        ]
      }
    },
    "dbServiceAlb" : {
      "Type" : "AWS::ECS::Service",
      "Condition" : "CreateDbELB",
      "DependsOn" : ["dbElbListener"],
      "Properties" : {
        "Cluster" : {"Ref": "DbClusterId"},
        "DesiredCount" : 1,
        "LoadBalancers" : [{"Fn::If": ["CreateDbELB", {
            "ContainerName" : {"Ref": "DbContainerName"},
            "ContainerPort" : {"Ref": "DbContainerPort"},
            "TargetGroupArn" : {"Ref": "dbElbTargetGroup"}
        }, {"Ref": "AWS::NoValue"}]}],
        "Role" : {"Fn::If": ["CreateDbELB", {"Ref": "clusterEcsRole"}, {"Ref": "AWS::NoValue"}]},
        "TaskDefinition" : {"Ref": "dbTask"}
      }
    },
    "dbService" : {
      "Type" : "AWS::ECS::Service",
      "Condition" : "CreateDbServiceOnly",
      "Properties" : {
        "Cluster" : {"Ref": "DbClusterId"},
        "DesiredCount" : 1,
        "TaskDefinition" : {"Ref": "dbTask"}
      }
    },
    "dbTask" : {
      "Type" : "AWS::ECS::TaskDefinition",
        "Properties" : {
          "ContainerDefinitions" : [ {
            "Command"    : ["/usr/bin/mongod", "--dbpath=/var/lib/mongodb"],
            "Image"      : {"Ref": "DbImage"},
            "Memory"     : 128,
            "Name"       : {"Ref": "DbContainerName"},
            "PortMappings" : [{"ContainerPort" : {"Ref": "DbContainerPort"},"HostPort":{"Ref": "DbHostPort"}}]
            } ]
        }
    },
    "dbElb" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition" : "CreateDbELB",
      "Properties" : {
        "HealthCheck" : {
           "HealthyThreshold" : "2",
           "Interval" : "6",
           "Target" : {"Fn::Join": ["", ["TCP:", {"Ref": "DbHostPort"}]]},
           "Timeout" : "5",
           "UnhealthyThreshold" : "2"
        },
        "Listeners" : [{
           "InstancePort" : {"Ref": "DbHostPort"},
           "InstanceProtocol" : "TCP",
           "LoadBalancerPort" : {"Ref": "DbHostPort"},
           "Protocol" : "TCP"
        }],
        "LoadBalancerName" : "db-ecs-elb",
        "Scheme" : "internal",
        "SecurityGroups" : [{"Ref": "dbElbSg"}],
        "Subnets" : [ {"Ref": "ELBSubnetId1"}, {"Ref": "ELBSubnetId2"} ]
      }
    },
    "dbElbSg"        : {
      "Type"      : "AWS::EC2::SecurityGroup",
      "Condition" : "CreateDbELB",
      "Properties": {
        "GroupDescription"    : "[cfn] db-elb-sg",
        "VpcId"               : {"Ref": "VpcId"},
        "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": {"Ref": "DbHostPort"}, "ToPort": {"Ref": "DbHostPort"}, "SourceSecurityGroupId": {"Ref": "AppInstanceSg"}}],
        "Tags"                : [{"Key": "Name", "Value": "db-elb-sg"}]
      }
    },
    "dbInstanceSgRule"     : {
      "Type"      : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "CreateDbELB",
      "DependsOn": ["dbElbSg"],
      "Properties": {
                "GroupId": {"Ref": "DbInstanceSg"},
                "IpProtocol": "tcp",
                "FromPort": {"Ref": "DbHostPort"},
                "ToPort": {"Ref": "DbHostPort"},
                "SourceSecurityGroupId": {"Ref": "dbElbSg"}
            }
    },
    "dbElbRecordSetGroup": {
      "Type"      : "AWS::Route53::RecordSetGroup",
      "Condition" : "CreateDbELB",
      "DependsOn" : ["dbElb"],
      "Properties": {
        "HostedZoneName": {"Fn::Join": ["", [{"Ref": "HostedZone"}, "."]]},
        "RecordSets"    : [
          {
            "Name"       : {
              "Fn::Join": ["", [{"Ref": "DbELBDnsName"}, "."]]
            },
            "Type"       : "A",
            "AliasTarget": {
              "HostedZoneId": {"Fn::GetAtt": ["dbElb", "CanonicalHostedZoneID"]},
              "DNSName"     : {"Fn::GetAtt": ["dbElb", "DNSName"]}
            }
          }
        ]
      }
    }
  }
}
